name: Docker

on:
  push:
    branches:
      - master
      - '*'
    # Publish semver tags as releases.
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
      - '*'

# Define environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@e1523de7571e31dbe865fd2e80c5c7c23ae71eb4 #v3.4.0
        with:
          cosign-release: 'v2.2.3'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set release tag as environment variable
        run: |
          export LATEST_TAG=$(cat release)
          echo "LATEST_TAG=$LATEST_TAG"

      # Build and push Docker image for x86
      - name: Build and push Docker image for x86
        id: build-and-push-x86
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=ma

      # Build and push Docker image for ARM
      - name: Build and push Docker image for ARM
        id: build-and-push-arm
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}
          push: true
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-arm
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image for x86 (for pull requests)
      - name: Build and push Docker image for x86 (PR)
        id: build-and-push-x86-pr
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}-PR${{ github.event.number }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-PR${{ github.event.number }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=ma

      # Build and push Docker image for ARM (for pull requests)
      - name: Build and push Docker image for ARM (PR)
        id: build-and-push-arm-pr
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}-PR${{ github.event.number }}
          push: true
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-PR${{ github.event.number }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image for x86 (for release or push to master)
      - name: Build and push Docker image for x86 (Release or Push to Master)
        id: build-and-push-latest-x86
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=ma

      # Build and push Docker image for ARM (for release or push to master)
      - name: Build and push Docker image for ARM (Release or Push to Master)
        id: build-and-push-latest-arm
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          build-args: |
            LATEST_TAG=${{ env.LATEST_TAG }}
          push: true
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image for x86
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          DIGEST: ${{ steps.build-and-push-x86.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Sign the published Docker image for ARM
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm
          DIGEST: ${{ steps.build-and-push-arm.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
